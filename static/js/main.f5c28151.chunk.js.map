{"version":3,"sources":["components/Header.tsx","components/Calendar.tsx","components/Month.tsx","components/Table.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","currentDate","useCalendar","context","useContext","DispatchContext","Error","useDispatch","next","prev","className","onClick","toISOString","slice","Month","dates","isCurrent","isToday","date","getDate","map","i","key","Table","prevMonth","curMonth","nextMonth","CalendarContext","createContext","Date","console","error","Calendar","children","useRef","fullDates","forceUpdate","useReducer","s","firstDate","current","getFullYear","getMonth","setDate","getDay","calFullDates","useCallback","push","useEffect","action","n","setMonth","value","dispatch","Provider","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f5c28151.chunk.js","sourcesContent":["import React from 'react'\nimport { useCalendar, useDispatch } from './Calendar'\n\nfunction Header() {\n  const { currentDate } = useCalendar()\n  const { next, prev } = useDispatch()\n\n  return (\n    <>\n      <div className=\"bg-gray-300 w-64 text-center\">\n        <button\n          className=\"w-10 hover:bg-blue-300 duration-100 mr-6\"\n          onClick={prev}\n        >\n          {'<'}\n        </button>\n        <span>{currentDate.toISOString().slice(0, 10)}</span>\n        <button\n          className=\"w-10 hover:bg-blue-300 duration-100 ml-6\"\n          onClick={next}\n        >\n          {'>'}\n        </button>\n      </div>\n      <ul className=\"bg-gray-200 w-64 flex flex-no-wrap justify-around\">\n        <li>S</li>\n        <li>M</li>\n        <li>T</li>\n        <li>W</li>\n        <li>T</li>\n        <li>F</li>\n        <li>S</li>\n      </ul>\n    </>\n  )\n}\n\nexport default Header\n","import React, {\n  useRef,\n  createContext,\n  useContext,\n  useCallback,\n  useReducer,\n  useEffect,\n} from 'react'\nimport Header from './Header'\nimport Table from './Table'\n\ntype ContextType = {\n  prevMonth: number[]\n  curMonth: number[]\n  nextMonth: number[]\n  currentDate: Date\n}\n\nconst CalendarContext = createContext<ContextType>({\n  prevMonth: [],\n  curMonth: [],\n  nextMonth: [],\n  currentDate: new Date(),\n})\n\ntype DispatchType = {\n  next: () => void\n  prev: () => void\n}\n\nconst DispatchContext = createContext<DispatchType>({\n  next: () => console.error(`next() must be used within [Calendar]`),\n  prev: () => console.error(`prev() must be used within [Calendar]`),\n})\n\nexport function useCalendar() {\n  const context = useContext(CalendarContext)\n\n  if (!context) {\n    throw new Error('useCalendar must be used within [Calendar]')\n  }\n\n  return context\n}\n\nexport function useDispatch() {\n  const context = useContext(DispatchContext)\n\n  if (!context) {\n    throw new Error('useDispatch must be used within [Calendar]')\n  }\n\n  return context\n}\n\ntype CalendarProps = {\n  children: JSX.Element[] | JSX.Element\n}\n\nfunction Calendar({ children }: CalendarProps) {\n  const currentDate = useRef<Date>(new Date())\n  const fullDates = useRef<number[][]>([[], [], []])\n\n  const forceUpdate = useReducer((s) => s + 1, 0)[1]\n\n  const firstDate = new Date(\n    currentDate.current.getFullYear(),\n    currentDate.current.getMonth(),\n    1\n  )\n\n  const date = new Date(\n    currentDate.current.getFullYear(),\n    currentDate.current.getMonth(),\n    1\n  )\n  date.setDate(date.getDate() - date.getDay())\n\n  const calFullDates = useCallback(() => {\n    fullDates.current = [[], [], []]\n    // previous month\n    while (date < firstDate) {\n      fullDates.current[0].push(date.getDate())\n      date.setDate(date.getDate() + 1)\n    }\n    // current month\n    while (date.getMonth() === currentDate.current.getMonth()) {\n      fullDates.current[1].push(date.getDate())\n      date.setDate(date.getDate() + 1)\n    }\n    // next month\n    while (date.getDay() > 0) {\n      fullDates.current[2].push(date.getDate())\n      date.setDate(date.getDate() + 1)\n    }\n  }, [date, firstDate])\n\n  calFullDates()\n\n  useEffect(() => {\n    calFullDates()\n  }, [calFullDates])\n\n  const action = useCallback(\n    (n) => {\n      currentDate.current.setMonth(currentDate.current.getMonth() + n)\n      forceUpdate()\n    },\n    [forceUpdate]\n  )\n\n  const value = {\n    prevMonth: fullDates.current[0],\n    curMonth: fullDates.current[1],\n    nextMonth: fullDates.current[2],\n    currentDate: currentDate.current,\n  }\n\n  const dispatch = {\n    next: () => action(+1),\n    prev: () => action(-1),\n  }\n\n  return (\n    <CalendarContext.Provider value={value}>\n      <DispatchContext.Provider value={dispatch}>\n        <div className=\"flex items-center flex-col mt-20\">{children}</div>\n      </DispatchContext.Provider>\n    </CalendarContext.Provider>\n  )\n}\n\nCalendar.Header = Header\nCalendar.Table = Table\n\nexport default Calendar\n","import React from 'react'\nimport { useCalendar } from './Calendar'\n\ntype MonthProps = { dates: number[] & any; isCurrent?: boolean }\n\nfunction Month({ dates, isCurrent }: MonthProps) {\n  const { currentDate } = useCalendar()\n  const isToday = (date: number) => isCurrent && date === currentDate.getDate()\n\n  return dates.map((date: number, i: number) => (\n    <span\n      key={i}\n      className={`m-2 w-5 h-6 text-center ${\n        !isCurrent && `text-gray-500 cursor-not-allowed`\n      } ${isToday(date) && `bg-red-200`} ${\n        isCurrent && `cursor-pointer hover:bg-blue-100`\n      }\n       `}\n    >\n      {date}\n    </span>\n  ))\n}\n\nexport default Month\n","import React from 'react'\nimport Month from './Month'\nimport { useCalendar } from './Calendar'\n\nfunction Table() {\n  const { prevMonth, curMonth, nextMonth } = useCalendar()\n\n  return (\n    <div className=\"border w-64 h-64 flex flex-wrap justify-center duration-100\">\n      <Month dates={prevMonth} />\n      <Month dates={curMonth} isCurrent={true} />\n      <Month dates={nextMonth} />\n    </div>\n  )\n}\n\nexport default Table\n","import React from 'react'\nimport Calendar from './components/Calendar'\n\nfunction App() {\n  return (\n    <Calendar>\n      <Calendar.Header />\n      <Calendar.Table />\n    </Calendar>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}